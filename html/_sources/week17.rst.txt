Week 17 - Generators
====================

.. sidebar:: Learning goals

   - Create memory and time efficient code using Iterator Classes, generator functions an generator expressoions.

To day you will learn about how to make your classes iterable. You will learn how to create a generator function and how to write this in an easier to read manner using a generator expression. 

We will look at Iterator classes

.. code:: python 
   :linenos:

   class Compute:
       def __iter__(self):
               self.last = 0
               return self

       def __next__(self):
               rv = self.last
               self.last += 1   
               if self.last > 10:
                   raise StopIteration()
               sleep(.5)
               return rv         

    for i in Compute():
        print(i)    


And see how it can be done in an easier to read and use manner with a generator function

.. code:: python
   :linenos:

   def compute():
        for i in range(10):
           yield i


And write a generator expression.


.. code:: python
   :linenos:

   (i for i in range(10))

Materials
---------

* `Introduction to Python Generators <https://realpython.com/introduction-to-python-generators/>`_


Exercises
---------

---------------------
ex1:  Python Students
---------------------

Based on the Student class below, create a PythonStudents class that acts as a collection of students. 
The class should implement the iterations functionality (iter() and next()) 
and be able to return an iter object. 
When iterated the Pythod_students object should return the name of each student 
in the list.        

.. code:: python
   :linenos:

     class PythonStudents:
       pass




     class Student:

        def __init__(self, name, cpr):
           self.name = name
           self.cpr = cpr

        @property
        def name(self):
                return self.__name

        @name.setter
        def name(self, name):
                self.__name = name.capitalize()

        def __add__(self, student):
                return Student('Anna the daugther', 1234)

        def __str__(self):
                return f'{self.name}, {self.cpr}'

        def __repr__(self):
                return f'{self.__dict__}'



-----------------------
ex2: School of students
-----------------------

In this exercise you start out by having a list of names, and a list of majors.
    
Your job is to create:
        
1. A list of dictionaries of students (ie: students = [{'id': 1,'name': 'Claus', 'major': 'Math'}]), cretated in a normal function that returns the resul.

2. A Generator that "returns" a generator object. So the student is yield instead of returned. 
   
Both functions should do the same, but one returns a list and one a generator object.

| **students = [{'id': 1,'name': 'Clasu', 'major': 'Math'}]**
| The id could be generated by a counter or like in a loop. 
| The Name should be found by randomly chosing a name from the names list
| The Major should be found by randomly chosing a major from the major list

----------------
ex3: Range Mimic
----------------

1. Create a "clone" of the build in range() function, by doing an iterator class.

Try this out first in your interpreter to get inspired:

>>> r = range(1, 10, 2)
>>> next(r)
TypeError: 'range' object is not an iterator
>>> i = iter(r)
>>> next(i)
1

2. Now do the same, but use a generator function instead.


---------------------------------
ex4: List Comp chal as generators
---------------------------------

Do the `List Comprehension chalenges`_ from last time but now use generator functions and generatpr expressions where possible.

.. _List Comprehension chalenges: ../week14/exercises/solution/list_comprehensions_challenge.py




.. todo::

   * dataclasses - @dataclass - decorator for fast creation of classes
     * decorator classes. 
       * __call__() method implementation
         * show the add() example:q

